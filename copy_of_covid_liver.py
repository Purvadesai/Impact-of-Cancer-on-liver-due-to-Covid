# -*- coding: utf-8 -*-
"""Copy of covid-liver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cAAhIAzvM39tUQwvS9BbaToh-mQ2tqC5
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import warnings
warnings.filterwarnings('ignore')

covidData = pd.read_csv('covid-liver.csv',encoding='latin-1',low_memory=False)
covidData.head()

"""#### Exploratory data analysis"""

#printing shape of data

print("Length if data is:" ,covidData.shape)

#printing information of attributes of data

covidData.info()

#checking for null values

covidData.isnull().sum()/len(covidData)*100

#checking data balance or imbalance

covidData['Cancer'].value_counts()

"""#### Data Visualizations"""

import matplotlib.pyplot as plt

values = covidData['Cancer'].value_counts().tolist()
labels = covidData['Cancer'].unique().tolist()

#plotting cancer data
fig, ax = plt.subplots()
plt.pie(values, labels=labels, shadow=False, startangle=90, rotatelabels=True, autopct='%1.5f%%', textprops={'fontsize': 18})
fig.set_size_inches(5, 5)
labeldistance=1.5

#plotting heatmap for data

import seaborn as sb

plt.figure(figsize=(8,6))
sb.heatmap(covidData.isnull(),cbar=True)
plt.show()

"""#### Data Cleaning"""

#finding column with null values greater than 35

cols=[]
for i in covidData.columns:
    n=covidData[i].isnull().sum()/len(covidData)*100
    if n>35:
        cols.append(i)
cols

#removing the above founded columns from dataset

covidData.drop(cols,axis=1,inplace=True)

#defining categorical and numerical columns

catCols=[]
numCols=[]
for i in covidData.columns:
    n=covidData[i].isnull().sum()/len(covidData)*100
    if n>0 and covidData[i].dtype=='object':
        catCols.append(i)
    elif  n>0 and (covidData[i].dtype=='int' or covidData[i].dtype=='float'):
        numCols.append(i)

print('Categorical columns are:',catCols)
print('\n Numerical columns are:',numCols)

#filling in null values for numerical columns - size and PS

#size depends on the age,so forming nbins for the age group and then the size column will be filled accordingly

pd.cut(covidData['Age'],5).value_counts()

bins=[26,40,54,68,82,np.inf]
label=['a','b','c','d','e']
covidData['age-group']=pd.cut(covidData['Age'],bins,labels=label)

#filling Size column's null value with median values of the that age group bin

covidData['Size']=covidData['Size'].fillna(covidData.groupby(['age-group','Gender'])['Size'].transform('median'))

#filling null values of PS column with fill na method, i.e., taking previous rows value

covidData['PS'].fillna(method='ffill',inplace=True)

catCols

covidData['age-group']=covidData['age-group'].astype('object')

covidData.head(2)

#taking all the categorical columns from the dataset, i.e., columns with object data type

categorical=[]
for i in covidData.columns:
    if covidData[i].dtype=='object':
        categorical.append(i)

categorical

#printing values of the above categorical columns

catList=[covidData[i].value_counts().index.tolist() for i in categorical]
catList

#encoding the categorical values

for i,j in zip(categorical,catList):
    covidData[i]=covidData[i].replace(j,list(range(len(j))))
    
covidData

covidData.dtypes

from sklearn.impute import KNNImputer

kin=KNNImputer(n_neighbors=10)
covidData['age-group']=covidData['age-group'].astype(float)

n=kin.fit_transform(covidData)
co=pd.DataFrame(n,index=covidData.index,columns=covidData.columns)
co

for i in catCols:
    co[i]=round(co[i],0)

co

[pd.unique(co[i]) for i in categorical ]

covid=co.copy()

for i,j in zip(categorical,catList):
    co[i]=co[i].replace(list(range(len(j))),j)

[pd.unique(co[i]) for i in categorical ]

co

plt.figure(figsize=(10,5))
sb.heatmap(co.isnull(),cbar=True,cmap='YlGnBu')
plt.show()

"""### Train test split"""

from sklearn.model_selection import train_test_split
covid_data = co.copy()
X = co.iloc[:,1:]
y = co.iloc[:,:1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.34, random_state=42)

X_train.shape

y_train.shape

X_test.shape

y_test.shape

covid_data.to_csv (r'Users\panthdesai\Desktop\Data Mining Assignments\covid-live.csv', index = False, header=True)

print (covid_data)

#balancing the data
#attribute selection
#encoding the data 
#train test split
#apply model

